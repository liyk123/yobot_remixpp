#pragma once

// generated by ./sqlpp11-ddl2cpp yobotdata_new.sql yobotdata_new.sql.h yobot::data

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace yobot
{
namespace data
{
  namespace DbSchema_
  {
    struct Key
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "key";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T key;
            T& operator()() { return key; }
            const T& operator()() const { return key; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace DbSchema_

  struct DbSchema: sqlpp::table_t<DbSchema,
               DbSchema_::Key,
               DbSchema_::Value>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "db_schema";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T dbSchema;
        T& operator()() { return dbSchema; }
        const T& operator()() const { return dbSchema; }
      };
    };
  };
  namespace AdminKey_
  {
    struct Key
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "key";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T key;
            T& operator()() { return key; }
            const T& operator()() const { return key; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Valid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "valid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T valid;
            T& operator()() { return valid; }
            const T& operator()() const { return valid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct KeyUsed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "key_used";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T keyUsed;
            T& operator()() { return keyUsed; }
            const T& operator()() const { return keyUsed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Cookie
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cookie";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cookie;
            T& operator()() { return cookie; }
            const T& operator()() const { return cookie; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct CreateTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "create_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T createTime;
            T& operator()() { return createTime; }
            const T& operator()() const { return createTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace AdminKey_

  struct AdminKey: sqlpp::table_t<AdminKey,
               AdminKey_::Key,
               AdminKey_::Valid,
               AdminKey_::KeyUsed,
               AdminKey_::Cookie,
               AdminKey_::CreateTime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "admin_key";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T adminKey;
        T& operator()() { return adminKey; }
        const T& operator()() const { return adminKey; }
      };
    };
  };
  namespace User_
  {
    struct Qqid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "qqid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T qqid;
            T& operator()() { return qqid; }
            const T& operator()() const { return qqid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Nickname
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "nickname";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nickname;
            T& operator()() { return nickname; }
            const T& operator()() const { return nickname; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct AuthorityGroup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "authority_group";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T authorityGroup;
            T& operator()() { return authorityGroup; }
            const T& operator()() const { return authorityGroup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Privacy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "privacy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T privacy;
            T& operator()() { return privacy; }
            const T& operator()() const { return privacy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ClanGroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "clan_group_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T clanGroupId;
            T& operator()() { return clanGroupId; }
            const T& operator()() const { return clanGroupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct LastLoginTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "last_login_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastLoginTime;
            T& operator()() { return lastLoginTime; }
            const T& operator()() const { return lastLoginTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct LastLoginIpaddr
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "last_login_ipaddr";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastLoginIpaddr;
            T& operator()() { return lastLoginIpaddr; }
            const T& operator()() const { return lastLoginIpaddr; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Password
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "password";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T password;
            T& operator()() { return password; }
            const T& operator()() const { return password; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct MustChangePassword
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "must_change_password";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mustChangePassword;
            T& operator()() { return mustChangePassword; }
            const T& operator()() const { return mustChangePassword; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct LoginCode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "login_code";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T loginCode;
            T& operator()() { return loginCode; }
            const T& operator()() const { return loginCode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct LoginCodeAvailable
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "login_code_available";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T loginCodeAvailable;
            T& operator()() { return loginCodeAvailable; }
            const T& operator()() const { return loginCodeAvailable; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct LoginCodeExpireTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "login_code_expire_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T loginCodeExpireTime;
            T& operator()() { return loginCodeExpireTime; }
            const T& operator()() const { return loginCodeExpireTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Salt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "salt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T salt;
            T& operator()() { return salt; }
            const T& operator()() const { return salt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Deleted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "deleted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deleted;
            T& operator()() { return deleted; }
            const T& operator()() const { return deleted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace User_

  struct User: sqlpp::table_t<User,
               User_::Qqid,
               User_::Nickname,
               User_::AuthorityGroup,
               User_::Privacy,
               User_::ClanGroupId,
               User_::LastLoginTime,
               User_::LastLoginIpaddr,
               User_::Password,
               User_::MustChangePassword,
               User_::LoginCode,
               User_::LoginCodeAvailable,
               User_::LoginCodeExpireTime,
               User_::Salt,
               User_::Deleted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "user";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T user;
        T& operator()() { return user; }
        const T& operator()() const { return user; }
      };
    };
  };
  namespace UserLogin_
  {
    struct Qqid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "qqid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T qqid;
            T& operator()() { return qqid; }
            const T& operator()() const { return qqid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct AuthCookie
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "auth_cookie";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T authCookie;
            T& operator()() { return authCookie; }
            const T& operator()() const { return authCookie; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct AuthCookieExpireTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "auth_cookie_expire_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T authCookieExpireTime;
            T& operator()() { return authCookieExpireTime; }
            const T& operator()() const { return authCookieExpireTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct LastLoginTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "last_login_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastLoginTime;
            T& operator()() { return lastLoginTime; }
            const T& operator()() const { return lastLoginTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct LastLoginIpaddr
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "last_login_ipaddr";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastLoginIpaddr;
            T& operator()() { return lastLoginIpaddr; }
            const T& operator()() const { return lastLoginIpaddr; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace UserLogin_

  struct UserLogin: sqlpp::table_t<UserLogin,
               UserLogin_::Qqid,
               UserLogin_::AuthCookie,
               UserLogin_::AuthCookieExpireTime,
               UserLogin_::LastLoginTime,
               UserLogin_::LastLoginIpaddr>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "user_login";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T userLogin;
        T& operator()() { return userLogin; }
        const T& operator()() const { return userLogin; }
      };
    };
  };
  namespace ClanGroup_
  {
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "group_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T groupId;
            T& operator()() { return groupId; }
            const T& operator()() const { return groupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct GroupName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "group_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T groupName;
            T& operator()() { return groupName; }
            const T& operator()() const { return groupName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Privacy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "privacy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T privacy;
            T& operator()() { return privacy; }
            const T& operator()() const { return privacy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct GameServer
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "game_server";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gameServer;
            T& operator()() { return gameServer; }
            const T& operator()() const { return gameServer; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Notification
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "notification";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T notification;
            T& operator()() { return notification; }
            const T& operator()() const { return notification; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct BattleId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "battle_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battleId;
            T& operator()() { return battleId; }
            const T& operator()() const { return battleId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Apikey
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "apikey";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T apikey;
            T& operator()() { return apikey; }
            const T& operator()() const { return apikey; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Threshold
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "threshold";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T threshold;
            T& operator()() { return threshold; }
            const T& operator()() const { return threshold; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct BossCycle
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "boss_cycle";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bossCycle;
            T& operator()() { return bossCycle; }
            const T& operator()() const { return bossCycle; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct NowCycleBossHealth
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "now_cycle_boss_health";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nowCycleBossHealth;
            T& operator()() { return nowCycleBossHealth; }
            const T& operator()() const { return nowCycleBossHealth; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct NextCycleBossHealth
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "next_cycle_boss_health";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nextCycleBossHealth;
            T& operator()() { return nextCycleBossHealth; }
            const T& operator()() const { return nextCycleBossHealth; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct ChallengingMemberList
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "challenging_member_list";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T challengingMemberList;
            T& operator()() { return challengingMemberList; }
            const T& operator()() const { return challengingMemberList; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct SubscribeList
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "subscribe_list";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subscribeList;
            T& operator()() { return subscribeList; }
            const T& operator()() const { return subscribeList; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct ChallengingStartTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "challenging_start_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T challengingStartTime;
            T& operator()() { return challengingStartTime; }
            const T& operator()() const { return challengingStartTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Deleted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "deleted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deleted;
            T& operator()() { return deleted; }
            const T& operator()() const { return deleted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace ClanGroup_

  struct ClanGroup: sqlpp::table_t<ClanGroup,
               ClanGroup_::GroupId,
               ClanGroup_::GroupName,
               ClanGroup_::Privacy,
               ClanGroup_::GameServer,
               ClanGroup_::Notification,
               ClanGroup_::BattleId,
               ClanGroup_::Apikey,
               ClanGroup_::Threshold,
               ClanGroup_::BossCycle,
               ClanGroup_::NowCycleBossHealth,
               ClanGroup_::NextCycleBossHealth,
               ClanGroup_::ChallengingMemberList,
               ClanGroup_::SubscribeList,
               ClanGroup_::ChallengingStartTime,
               ClanGroup_::Deleted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "clan_group";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T clanGroup;
        T& operator()() { return clanGroup; }
        const T& operator()() const { return clanGroup; }
      };
    };
  };
  namespace ClanMember_
  {
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "group_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T groupId;
            T& operator()() { return groupId; }
            const T& operator()() const { return groupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Qqid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "qqid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T qqid;
            T& operator()() { return qqid; }
            const T& operator()() const { return qqid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Role
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "role";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T role;
            T& operator()() { return role; }
            const T& operator()() const { return role; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct LastSaveSlot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "last_save_slot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastSaveSlot;
            T& operator()() { return lastSaveSlot; }
            const T& operator()() const { return lastSaveSlot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct RemainingStatus
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "remaining_status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T remainingStatus;
            T& operator()() { return remainingStatus; }
            const T& operator()() const { return remainingStatus; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace ClanMember_

  struct ClanMember: sqlpp::table_t<ClanMember,
               ClanMember_::GroupId,
               ClanMember_::Qqid,
               ClanMember_::Role,
               ClanMember_::LastSaveSlot,
               ClanMember_::RemainingStatus>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "clan_member";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T clanMember;
        T& operator()() { return clanMember; }
        const T& operator()() const { return clanMember; }
      };
    };
  };
  namespace ClanGroupBackups_
  {
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "group_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T groupId;
            T& operator()() { return groupId; }
            const T& operator()() const { return groupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct BattleId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "battle_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battleId;
            T& operator()() { return battleId; }
            const T& operator()() const { return battleId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct GroupData
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "group_data";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T groupData;
            T& operator()() { return groupData; }
            const T& operator()() const { return groupData; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace ClanGroupBackups_

  struct ClanGroupBackups: sqlpp::table_t<ClanGroupBackups,
               ClanGroupBackups_::GroupId,
               ClanGroupBackups_::BattleId,
               ClanGroupBackups_::GroupData>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "clan_group_backups";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T clanGroupBackups;
        T& operator()() { return clanGroupBackups; }
        const T& operator()() const { return clanGroupBackups; }
      };
    };
  };
  namespace ClanChallenge_
  {
    struct Cid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cid;
            T& operator()() { return cid; }
            const T& operator()() const { return cid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Bid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bid;
            T& operator()() { return bid; }
            const T& operator()() const { return bid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Gid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gid;
            T& operator()() { return gid; }
            const T& operator()() const { return gid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Qqid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "qqid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T qqid;
            T& operator()() { return qqid; }
            const T& operator()() const { return qqid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ChallengePcrdate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "challenge_pcrdate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T challengePcrdate;
            T& operator()() { return challengePcrdate; }
            const T& operator()() const { return challengePcrdate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ChallengePcrtime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "challenge_pcrtime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T challengePcrtime;
            T& operator()() { return challengePcrtime; }
            const T& operator()() const { return challengePcrtime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct BossCycle
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "boss_cycle";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bossCycle;
            T& operator()() { return bossCycle; }
            const T& operator()() const { return bossCycle; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct BossNum
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "boss_num";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bossNum;
            T& operator()() { return bossNum; }
            const T& operator()() const { return bossNum; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct BossHealthRemain
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "boss_health_remain";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bossHealthRemain;
            T& operator()() { return bossHealthRemain; }
            const T& operator()() const { return bossHealthRemain; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ChallengeDamage
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "challenge_damage";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T challengeDamage;
            T& operator()() { return challengeDamage; }
            const T& operator()() const { return challengeDamage; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct IsContinue
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_continue";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isContinue;
            T& operator()() { return isContinue; }
            const T& operator()() const { return isContinue; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Message
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "message";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T message;
            T& operator()() { return message; }
            const T& operator()() const { return message; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Behalf
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "behalf";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T behalf;
            T& operator()() { return behalf; }
            const T& operator()() const { return behalf; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace ClanChallenge_

  struct ClanChallenge: sqlpp::table_t<ClanChallenge,
               ClanChallenge_::Cid,
               ClanChallenge_::Bid,
               ClanChallenge_::Gid,
               ClanChallenge_::Qqid,
               ClanChallenge_::ChallengePcrdate,
               ClanChallenge_::ChallengePcrtime,
               ClanChallenge_::BossCycle,
               ClanChallenge_::BossNum,
               ClanChallenge_::BossHealthRemain,
               ClanChallenge_::ChallengeDamage,
               ClanChallenge_::IsContinue,
               ClanChallenge_::Message,
               ClanChallenge_::Behalf>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "clan_challenge";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T clanChallenge;
        T& operator()() { return clanChallenge; }
        const T& operator()() const { return clanChallenge; }
      };
    };
  };
  namespace Character_
  {
    struct Chid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "chid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chid;
            T& operator()() { return chid; }
            const T& operator()() const { return chid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Frequent
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "frequent";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T frequent;
            T& operator()() { return frequent; }
            const T& operator()() const { return frequent; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace Character_

  struct Character: sqlpp::table_t<Character,
               Character_::Chid,
               Character_::Name,
               Character_::Frequent>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T character;
        T& operator()() { return character; }
        const T& operator()() const { return character; }
      };
    };
  };
} // namespace data
} // namespace yobot
